{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ExpUtils","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"tutorials/","title":"Tutorials","text":"<p>TODO</p>"},{"location":"reference/io/","title":"IO","text":"<p>Different IO operations used to load and save data through the exputils package.  They are usually not required to be called manually.</p>"},{"location":"reference/io/#exputils.io.general.makedirs","title":"<code>makedirs</code>","text":"<p>Creates a directory and all intermediate directories if they do not exist in a file path.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The directory path to create.</p> required Source code in <code>exputils/io/general.py</code> <pre><code>def makedirs(path: str):\n    \"\"\"\n    Creates a directory and all intermediate directories if they do not exist in a file path.\n\n    Parameters:\n        path (str): The directory path to create.\n    \"\"\"\n\n    if not os.path.isdir(path):\n        os.makedirs(path)\n</code></pre>"},{"location":"reference/io/#exputils.io.general.makedirs_for_file","title":"<code>makedirs_for_file</code>","text":"<p>Creates the necessary directories for a given file path if they do not already exist.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>The complete file path for which the directories are to be created.</p> required Source code in <code>exputils/io/general.py</code> <pre><code>def makedirs_for_file(filepath: str):\n    \"\"\"\n    Creates the necessary directories for a given file path if they do not already exist.\n\n    Parameters:\n        filepath (str): The complete file path for which the directories are to be created.\n    \"\"\"\n\n    directory_path, _ = os.path.split(filepath)\n    makedirs(directory_path)\n</code></pre>"},{"location":"reference/io/#exputils.io.numpy.load_numpy_files","title":"<code>load_numpy_files</code>","text":"<p>Loads numpy files from a specified directory into an AttrDict.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>The path to the directory containing the numpy files.</p> required <code>allowed_data_filter</code> <code>list</code> <p>A list of allowed file names to be loaded. If specified, only files with names in this list will be loaded.</p> <code>None</code> <code>denied_data_filter</code> <code>list</code> <p>A list of denied file names to be excluded from loading. If specified, files with names in this list will not be loaded.</p> <code>None</code> <code>allow_pickle</code> <code>bool</code> <p>Whether to allow loading pickled (serialized) objects. Default is True.   This could allow arbitrary code execution. Only load files you trust!</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both allowed_data_filter and denied_data_filter are specified.</p> <code>FileNotFoundError</code> <p>If the specified directory does not exist.</p> <code>Exception</code> <p>If an error occurs during loading of a file.</p> <p>Returns:</p> Name Type Description <code>data</code> <code>AttrDict</code> <p>Dictionary with loaded data where the keys are file names without extensions and the values are the respective numpy arrays.</p> Source code in <code>exputils/io/numpy.py</code> <pre><code>def load_numpy_files(directory: str,\n                    allowed_data_filter: Optional[list] = None,\n                    denied_data_filter: Optional[list] = None,\n                    allow_pickle: bool = True) -&gt; AttrDict:\n    \"\"\"Loads numpy files from a specified directory into an AttrDict.\n\n    Parameters:\n        directory (str):\n            The path to the directory containing the numpy files.\n        allowed_data_filter (list, optional):\n            A list of allowed file names to be loaded.\n            If specified, only files with names in this list will be loaded.\n        denied_data_filter (list, optional):\n            A list of denied file names to be excluded from loading.\n            If specified, files with names in this list will not be loaded.\n        allow_pickle (bool):\n            Whether to allow loading pickled (serialized) objects.\n            Default is True. &lt;br&gt;\n            :warning: This could allow arbitrary code execution. Only load files you trust!\n\n    Raises:\n        ValueError:\n            If both allowed_data_filter and denied_data_filter are specified.\n        FileNotFoundError:\n            If the specified directory does not exist.\n        Exception:\n            If an error occurs during loading of a file.\n\n    Returns:\n        data (AttrDict):\n            Dictionary with loaded data where the keys are file names without extensions\n            and the values are the respective numpy arrays.\n    \"\"\"\n\n    if allowed_data_filter is not None and denied_data_filter is not None:\n        raise ValueError('in_data_filter and out_data_filter can not both be set, only one or none!')\n\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory {!r} does not exist!'.format(directory))\n\n    data = AttrDict()\n\n    for file in glob(os.path.join(directory, '*.npy')):\n        stat_name = os.path.splitext(os.path.basename(file))[0]\n\n        if eu.misc.is_allowed(stat_name, allowed_list=allowed_data_filter, denied_list=denied_data_filter):\n            try:\n                stat_val = np.load(file, allow_pickle=allow_pickle)\n            except FileNotFoundError:\n                raise\n            except Exception as e:\n                raise Exception('Exception during loading of file {!r}!'.format(file)) from e\n\n            if len(stat_val.shape) == 0:\n                stat_val = stat_val.dtype.type(stat_val)\n\n            data[stat_name] = stat_val\n\n    for file in glob(os.path.join(directory, '*.npz')):\n        stat_name = os.path.splitext(os.path.basename(file))[0]\n        if eu.misc.is_allowed(stat_name, allowed_list=allowed_data_filter, denied_list=denied_data_filter):\n            try:\n                stat_vals = AttrDict(np.load(file, allow_pickle=allow_pickle))\n            except FileNotFoundError:\n                raise\n            except Exception as e:\n                raise Exception('Exception during loading of file {!r}!'.format(file)) from e\n\n            # remove data that should not be loaded\n            keys = [k for k, v in stat_vals.items() if not eu.misc.is_allowed(k, allowed_list=allowed_data_filter, denied_list=denied_data_filter)]\n            for x in keys:\n                del stat_vals[x]\n\n            # numpy encapsulates scalars as darrays with an empty shape\n            # recover the original type\n            for substat_name, substat_val in stat_vals.items():\n                if len(substat_val.shape) == 0:\n                    stat_vals[substat_name] = substat_val.dtype.type(substat_val)\n\n            data[stat_name] = stat_vals\n\n    return data\n</code></pre>"},{"location":"reference/io/#exputils.io.numpy.save_dict_to_numpy_files","title":"<code>save_dict_to_numpy_files</code>","text":"<p>Saves a dictionary with numpy arrays to numpy files (either .npy, .npz, or .npz compressed formats).</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>dict</code> <p>Dictionary containing the data to be saved, with keys as filenames and values as data to be saved.</p> required <code>path</code> <code>str</code> <p>Directory or file path where the numpy files will be saved. Default is the current directory.</p> <code>'.'</code> <code>mode</code> <code>str</code> <p>Mode in which to save the data. Can be 'npy', 'npz', or 'cnpz'. Default is 'npy'.</p> <code>'npy'</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If an invalid mode is provided.</p> Source code in <code>exputils/io/numpy.py</code> <pre><code>def save_dict_to_numpy_files(data: dict,\n                             path: Optional[str] = '.',\n                             mode: Optional[str] = 'npy'):\n    \"\"\"Saves a dictionary with numpy arrays to numpy files (either .npy, .npz, or .npz compressed formats).\n\n    Parameters:\n        data (dict):\n            Dictionary containing the data to be saved, with keys as filenames and values as data to be saved.\n        path (str):\n            Directory or file path where the numpy files will be saved.\n            Default is the current directory.\n        mode (str):\n            Mode in which to save the data.\n            Can be 'npy', 'npz', or 'cnpz'.\n            Default is 'npy'.\n\n    Raises:\n        ValueError: If an invalid mode is provided.\n    \"\"\"\n\n    # save logs in numpy format if they exist\n    if mode.lower() == 'npy':\n        eu.io.makedirs(path)\n        for name, values in data.items():\n            np.save(os.path.join(path, name), values)\n\n    elif mode.lower() == 'npz':\n        eu.io.makedirs_for_file(path)\n        np.savez(path, **data)\n\n    elif mode.lower() == 'cnpz':\n        eu.io.makedirs_for_file(path)\n        np.savez_compressed(path, **data)\n\n    else:\n        raise ValueError('Unknown numpy logging mode {!r}! Only \\'npy\\', \\'npz\\' and \\'cnpz\\' are allowed.'.format(mode))\n</code></pre>"},{"location":"reference/io/#exputils.io.dill.load_dill","title":"<code>load_dill</code>","text":"<p>Loads a serialized object from a file using the dill library.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the file from which to load the object. The file extension is optionally added if not already present.</p> required <p>Returns:</p> Name Type Description <code>obj</code> <code>Any</code> <p>The object that was deserialized from the file.</p> Notes: <ul> <li>If the specified file does not exist, the function attempts to append   the expected file extension (.dill) before throwing an error.</li> <li> This could allow arbitrary code execution. Only load files you trust!</li> </ul> Source code in <code>exputils/io/dill.py</code> <pre><code>def load_dill(file_path: str) -&gt; object:\n    \"\"\"\n    Loads a serialized object from a file using the [dill](https://pypi.org/project/dill/) library.\n\n    Parameters:\n        file_path (str):\n            The path to the file from which to load the object.\n            The file extension is optionally added if not already present.\n\n    Returns:\n        obj (Any): The object that was deserialized from the file.\n\n    &lt;h4&gt;Notes:&lt;/h4&gt;\n\n    - If the specified file does not exist, the function attempts to append\n      the expected file extension (.dill) before throwing an error.\n    - :warning: This could allow arbitrary code execution. Only load files you trust!\n    \"\"\"\n    if not os.path.exists(file_path):\n        if not file_path.endswith('.' + DILL_FILE_EXTENSION):\n            file_path += '.' + DILL_FILE_EXTENSION\n\n    with open(file_path, 'rb') as fh:\n        obj = dill.load(fh)\n    return obj\n</code></pre>"},{"location":"reference/io/#exputils.io.dill.load_dill_files","title":"<code>load_dill_files</code>","text":"<p>Loads all serialized objects from a directory using the dill library and returns them in a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>The path to the directory containing dill-serialized files.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified directory does not exist.</p> <p>Returns:</p> Name Type Description <code>data</code> <code>AttrDict</code> <p>An attribute dictionary where keys are the file names (without extensions) and values are the deserialized objects.</p> Notes: <ul> <li>If the specified file does not exist, the function attempts to append   the expected file extension (.dill) before throwing an error.</li> <li> This could allow arbitrary code execution. Only load files you trust!</li> </ul> Source code in <code>exputils/io/dill.py</code> <pre><code>def load_dill_files(directory: str):\n    \"\"\"\n    Loads all serialized objects from a directory using the [dill](https://pypi.org/project/dill/)\n    library and returns them in a dictionary.\n\n    Parameters:\n        directory (str):\n            The path to the directory containing dill-serialized files.\n\n    Raises:\n        FileNotFoundError: If the specified directory does not exist.\n\n    Returns:\n        data (AttrDict):\n            An attribute dictionary where keys are the file names (without extensions) and\n            values are the deserialized objects.\n\n    &lt;h4&gt;Notes:&lt;/h4&gt;\n\n    - If the specified file does not exist, the function attempts to append\n      the expected file extension (.dill) before throwing an error.\n    - :warning: This could allow arbitrary code execution. Only load files you trust!\n    \"\"\"\n\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory {!r} does not exist!'.format(directory))\n\n    data_dict = eu.AttrDict()\n\n    for file in glob(os.path.join(directory, '*.' + DILL_FILE_EXTENSION)):\n        data_name = os.path.splitext(os.path.basename(file))[0]\n        data = load_dill(file)\n        data_dict[data_name] = data\n\n    return data_dict\n</code></pre>"},{"location":"reference/io/#exputils.io.dill.save_dill","title":"<code>save_dill</code>","text":"<p>Serializes a Python object and saves it to a file using the dill serialization library.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Any</code> <p>The Python object to be serialized.</p> required <code>file_path</code> <code>str</code> <p>The file path where the serialized object will be saved.</p> required Notes: <ul> <li>If the provided file path does not have the correct file extension for Dill files,   the extension will be added automatically.</li> <li>The necessary directories for the file path will be created if they do not exist.</li> </ul> Source code in <code>exputils/io/dill.py</code> <pre><code>def save_dill(obj,\n              file_path: str):\n    \"\"\"\n    Serializes a Python object and saves it to a file using the [dill](https://pypi.org/project/dill/)\n    serialization library.\n\n    Parameters:\n        obj (Any):\n            The Python object to be serialized.\n        file_path (str):\n            The file path where the serialized object will be saved.\n\n    &lt;h4&gt;Notes:&lt;/h4&gt;\n\n    - If the provided file path does not have the correct file extension for Dill files,\n      the extension will be added automatically.\n    - The necessary directories for the file path will be created if they do not exist.\n    \"\"\"\n    if not file_path.endswith('.' + DILL_FILE_EXTENSION):\n        file_path += '.' + DILL_FILE_EXTENSION\n\n    eu.io.makedirs_for_file(file_path)\n    with open(file_path, 'wb') as fh:\n        dill.dump(obj, fh)\n</code></pre>"},{"location":"reference/loading/","title":"Loading","text":"<p>Functions to load the logged data from experiments and their repetitions and the structure of the generated experiments. The functions can be accessed under the module:</p> <p><code>exputils.data.loading</code></p>"},{"location":"reference/loading/#exputils.data.loading.load_experiment_descriptions","title":"<code>load_experiment_descriptions</code>","text":"<p>Loads and returns descriptions of experiments from a specified experiments directory.</p> <p>Parameters:</p> Name Type Description Default <code>experiments_directory</code> <code>str</code> <p>Path to the experiments directory. Defaults to \"..\\DEFAULT_EXPERIMENTS_DIRECTORY\".</p> <code>None</code> <code>allowed_experiments_id_list</code> <code>list</code> <p>List of experiment IDs to be loaded. Cannot be used with denied_experiments_id_list. Default: All experiments are considered.</p> <code>None</code> <code>denied_experiments_id_list</code> <code>list</code> <p>List of experiment IDs to be excluded. Cannot be used with allowed_experiments_id_list. Default: All experiments are considered.</p> <code>None</code> <code>experiment_directory_template</code> <code>str</code> <p>Template string for the name of experiment directories. The template should include a placeholder for the experiment id. Example: 'experiment_{:06d}' for experiment folders with ids with at least six digits. Defaults to EXPERIMENT_DIRECTORY_TEMPLATE.</p> <code>None</code> <code>repetition_directory_template</code> <code>str</code> <p>Template string for the name of experiment directories. The template should include a placeholder for the repetition id. Example: 'repetition_{:06d}' for repetition folders with ids with at least six digits. Defaults to REPETITION_DIRECTORY_TEMPLATE.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>AttrDict</code> <code>AttrDict</code> <p>A dictionary containing descriptions of the experiments.</p> <code>AttrDict</code> <p>The keys are the experiment ids and the values are dictionaries with the follwing properties:</p> <ul> <li>id: experiment id.</li> <li>name: Name of the experiment. Default: 'exp &lt;experiment id&gt;'.</li> <li>short_name: A short name for display purposes. Default: 'e&lt;experiment id&gt;'.</li> <li>order: Sort order of experiments if they should be displayed in a GUI.</li> <li>directory: Full path to experiment directory.</li> <li>description: Description of the experiment. Default: ''.</li> <li>repetition_ids: List of repetition ids.</li> <li>repetition_directories : List of full paths to repetition directories.</li> </ul> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both allowed_experiments_id_list and denied_experiments_id_list are provided, or if no folders are found within experiments_directory.</p> Source code in <code>exputils/data/loading.py</code> <pre><code>def load_experiment_descriptions(experiments_directory: Optional[str] = None,\n                                 allowed_experiments_id_list: Optional[list] = None,\n                                 denied_experiments_id_list: Optional[list] = None,\n                                 experiment_directory_template: Optional[str] = None,\n                                 repetition_directory_template: Optional[str] = None) -&gt; AttrDict:\n    \"\"\"\n    Loads and returns descriptions of experiments from a specified experiments directory.\n\n    Arguments:\n        experiments_directory (str): Path to the experiments directory.\n            Defaults to \"..\\DEFAULT_EXPERIMENTS_DIRECTORY\".\n        allowed_experiments_id_list (list): List of experiment IDs to be loaded.\n            Cannot be used with denied_experiments_id_list.\n            Default: All experiments are considered.\n        denied_experiments_id_list (list): List of experiment IDs to be excluded.\n            Cannot be used with allowed_experiments_id_list.\n            Default: All experiments are considered.\n        experiment_directory_template (str): Template string for the name of experiment directories.\n            The template should include a placeholder for the experiment id.\n            Example: 'experiment_{:06d}' for experiment folders with ids with at least six digits.\n            Defaults to EXPERIMENT_DIRECTORY_TEMPLATE.\n        repetition_directory_template (str): Template string for the name of experiment directories.\n            The template should include a placeholder for the repetition id.\n            Example: 'repetition_{:06d}' for repetition folders with ids with at least six digits.\n            Defaults to REPETITION_DIRECTORY_TEMPLATE.\n\n    Returns:\n        AttrDict: A dictionary containing descriptions of the experiments.\n        The keys are the experiment ids and the values are dictionaries with the follwing properties:\n\n            - id: experiment id.\n            - name: Name of the experiment. Default: 'exp &lt;experiment id\\&gt;'.\n            - short_name: A short name for display purposes. Default: 'e&lt;experiment id\\&gt;'.\n            - order: Sort order of experiments if they should be displayed in a GUI.\n            - directory: Full path to experiment directory.\n            - description: Description of the experiment. Default: ''.\n            - repetition_ids: List of repetition ids.\n            - repetition_directories : List of full paths to repetition directories.\n\n    Raises:\n        ValueError: If both allowed_experiments_id_list and denied_experiments_id_list are provided,\n            or if no folders are found within experiments_directory.\n    \"\"\"\n\n    if experiments_directory is None:\n        experiments_directory = os.path.join('..', eu.DEFAULT_EXPERIMENTS_DIRECTORY)\n\n    if allowed_experiments_id_list is not None and denied_experiments_id_list is not None:\n        raise ValueError('allowed_experiments_id_list and denied_experiments_id_list can not be set at the same time!')\n\n    if experiment_directory_template is None: experiment_directory_template = eu.EXPERIMENT_DIRECTORY_TEMPLATE\n    experiment_directory_template = re.sub('\\{.*\\}', '*', experiment_directory_template)\n\n    if repetition_directory_template is None: repetition_directory_template = eu.REPETITION_DIRECTORY_TEMPLATE\n    repetition_directory_template = re.sub('\\{.*\\}', '*', repetition_directory_template)\n\n    experiment_descriptions = AttrDict()\n\n    exp_directories = glob(os.path.join(experiments_directory, experiment_directory_template))\n    for order, exp_directory in enumerate(np.sort(exp_directories)):\n\n        try:\n            exp_id = re.findall(r'\\d+', os.path.basename(exp_directory))[0]\n        except IndexError as err:\n            raise ValueError('The experiments_directory (\\'{}\\') seems not to have experiment folders!'.format(experiments_directory)) from err\n\n        is_add_experiment_descr = True\n        if allowed_experiments_id_list is not None and exp_id not in allowed_experiments_id_list:\n            is_add_experiment_descr = False\n        elif denied_experiments_id_list is not None and exp_id in denied_experiments_id_list:\n            is_add_experiment_descr = False\n\n        if is_add_experiment_descr:\n            experiment_descr = AttrDict()\n            experiment_descr.id = exp_id\n            experiment_descr.name = 'exp {}'.format(exp_id)\n            experiment_descr.order = order\n            experiment_descr.is_load_data = True\n            experiment_descr.directory = exp_directory\n            experiment_descr.short_name = 'e{}'.format(exp_id)\n            experiment_descr.description = ''\n\n            # find repetition directories and ids\n            repetition_directories = glob(os.path.join(exp_directory, repetition_directory_template))\n            experiment_descr.repetition_directories = repetition_directories\n            if experiment_descr.repetition_directories:\n                experiment_descr.repetition_directories.sort()\n\n            experiment_descr.repetition_ids = []\n            for rep_directory in np.sort(repetition_directories):\n                rep_id = re.findall(r'\\d+', os.path.basename(rep_directory))[0]\n                experiment_descr.repetition_ids.append(int(rep_id))\n            experiment_descr.repetition_ids.sort()\n\n            experiment_descriptions[exp_id] = experiment_descr\n\n    return experiment_descriptions\n</code></pre>"},{"location":"reference/loading/#exputils.data.loading.load_experiment_data","title":"<code>load_experiment_data</code>","text":"<p>Loads logged data from experiments and their repetitions in form of nested dictionaries and numpy arrays. Collects the data for each datasource (the variable that was logged, for example a loss per network update) over all repetitions in a single numpy array.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_descriptions</code> <code>AttrDict</code> <p>Predefined descriptions of the experiments. The descriptions contain the paths to all experiments and their repetitions that should be loaded. See <code>load_experiment_descriptions</code> for details. Can not be set together with experiments_directory.</p> <code>None</code> <code>experiments_directory</code> <code>str</code> <p>Path to the experiments directory. Defaults to <code>'..\\experiments'</code>. Can not be set together with experiment_descriptions.</p> <code>None</code> <code>allowed_experiments_id_list</code> <code>list</code> <p>List of allowed experiment IDs. Only these will be loaded. Can not be set together with denied_experiments_id_list.</p> <code>None</code> <code>denied_experiments_id_list</code> <code>list</code> <p>List of denied experiment IDs. All experiments besides these will be loaded. Can not be set together with allowed_experiments_id_list.</p> <code>None</code> <code>data_directory</code> <code>str</code> <p>Relative path of the data directories under the experiments and repetitions. Defaults to <code>'./data'</code>.</p> <code>None</code> <code>is_load_repetition_data</code> <code>bool</code> <p>Flag to indicate if repetition data should be loaded. Defaults to <code>True</code>.</p> <code>True</code> <code>pre_allowed_data_filter</code> <code>list</code> <p>List of datasources that will be loaded before the loading callback functions (see <code>on_experiment_data_loaded</code> and <code>on_repetition_data_loaded</code>) are called. Thus this data will be given to the callback functions. If defined then only these datasources will be loaded. The list contains strings with names of datasources.</p> <code>None</code> <code>pre_denied_data_filter</code> <code>list</code> <p>List of datasources that will NOT be loaded before the loading callback functions (see <code>on_experiment_data_loaded</code> and <code>on_repetition_data_loaded</code>) are called. Thus this data will NOT be given to the callback functions. If defined then all existing datasources besides the ones specified will be loaded. The list contains strings with names of datasources.</p> <code>None</code> <code>post_allowed_data_filter</code> <code>list</code> <p>List of datasources that will be added to the data dictionary that is returned after loading and the loading callback functions (see <code>on_experiment_data_loaded</code> and <code>on_repetition_data_loaded</code>) are called. If defined then only these datasources will be returned. The list contains strings with names of datasources.</p> <code>None</code> <code>post_denied_data_filter</code> <code>list</code> <p>List of datasources that will NOT be added to the data dictionary that is returned after loading and the loading callback functions (see <code>on_experiment_data_loaded</code> and <code>on_repetition_data_loaded</code>) are called. If defined then all existing datasources besides the ones specified will be returned. The list contains strings with names of datasources.</p> <code>None</code> <code>on_experiment_data_loaded</code> <code>list</code> <p>List of callback functions executed when experiment data is loaded. Can be used to modify the data by changing or adding elements. Form of the functions: func(exp_id: int, exp_data: AttrDict) -&gt; AttrDict.</p> <code>None</code> <code>on_repetition_data_loaded</code> <code>list</code> <p>List of callback functions executed when repetition data is loaded. Can be used to modify the data by changing or adding elements. Form of the functions: func(exp_id: int, exp_data: AttrDict) -&gt; AttrDict.</p> <code>None</code> <code>allow_pickle</code> <code>bool</code> <p>Indicates if loading of pickled objects is allowed. Defaults to True.   This could allow arbitrary code execution. Only load files you trust!</p> <code>True</code> <p>Raises:</p> Type Description <code>ValueError</code> <p>If both experiments_directory and experiment_descriptions are set.</p> <code>ValueError</code> <p>If both experiment_descriptions and any of (allowed_experiments_id_list or denied_experiments_id_list) are set.</p> <code>ValueError</code> <p>If both allowed_experiments_id_list and denied_experiments_id_list are set.</p> <code>Exception</code> <p>If data loading fails for an experiment or a repetition.</p> <p>Returns:</p> Name Type Description <code>data</code> <code>AttrDict</code> <p>Loaded data.</p> <code>experiment_descriptions</code> <code>AttrDict</code> <p>Experiment descriptions of the loaded data. See <code>load_experiment_descriptions</code> for details.</p> Source code in <code>exputils/data/loading.py</code> <pre><code>def load_experiment_data(experiment_descriptions: Optional[AttrDict]=None,\n                         experiments_directory: Optional[str]=None,\n                         allowed_experiments_id_list: Optional[list]=None,\n                         denied_experiments_id_list: Optional[list]=None,\n                         data_directory: Optional[str]=None,\n                         is_load_repetition_data: bool=True,\n                         pre_allowed_data_filter: Optional[list]=None,\n                         pre_denied_data_filter: Optional[list]=None,\n                         post_allowed_data_filter: Optional[list]=None,\n                         post_denied_data_filter: Optional[list]=None,\n                         on_experiment_data_loaded: Optional[list]=None,\n                         on_repetition_data_loaded: Optional[list]=None,\n                         allow_pickle: bool = True) -&gt; tuple[AttrDict, AttrDict]:\n    \"\"\"\n    Loads logged data from experiments and their repetitions in form of nested dictionaries and numpy arrays.\n    Collects the data for each datasource (the variable that was logged, for example a loss per network update)\n    over all repetitions in a single numpy array.\n\n    [//]: # (TODO: give an example of a file structure and how it is loaded)\n\n    Parameters:\n        experiment_descriptions (AttrDict):\n            Predefined descriptions of the experiments.\n            The descriptions contain the paths to all experiments and their repetitions that should be loaded.\n            See [`load_experiment_descriptions`][exputils.data.loading.load_experiment_descriptions] for details.\n            Can not be set together with experiments_directory.\n        experiments_directory (str):\n            Path to the experiments directory.\n            Defaults to `'..\\experiments'`.\n            Can not be set together with experiment_descriptions.\n        allowed_experiments_id_list (list):\n            List of allowed experiment IDs.\n            Only these will be loaded.\n            Can not be set together with denied_experiments_id_list.\n        denied_experiments_id_list (list):\n            List of denied experiment IDs.\n            All experiments besides these will be loaded.\n            Can not be set together with allowed_experiments_id_list.\n        data_directory (str):\n            Relative path of the data directories under the experiments and repetitions.\n            Defaults to `'./data'`.\n        is_load_repetition_data (bool):\n            Flag to indicate if repetition data should be loaded.\n            Defaults to `True`.\n        pre_allowed_data_filter (list):\n            List of datasources that will be loaded before the loading callback functions\n            (see `on_experiment_data_loaded` and `on_repetition_data_loaded`) are called.\n            Thus this data will be given to the callback functions.\n            If defined then only these datasources will be loaded.\n            The list contains strings with names of datasources.\n        pre_denied_data_filter (list):\n            List of datasources that will NOT be loaded before the loading callback functions\n            (see `on_experiment_data_loaded` and `on_repetition_data_loaded`) are called.\n            Thus this data will NOT be given to the callback functions.\n            If defined then all existing datasources besides the ones specified will be loaded.\n            The list contains strings with names of datasources.\n        post_allowed_data_filter (list):\n            List of datasources that will be added to the data dictionary that is returned after\n            loading and the loading callback functions (see `on_experiment_data_loaded` and `on_repetition_data_loaded`)\n            are called.\n            If defined then only these datasources will be returned.\n            The list contains strings with names of datasources.\n        post_denied_data_filter (list):\n            List of datasources that will NOT be added to the data dictionary that is returned after\n            loading and the loading callback functions (see `on_experiment_data_loaded` and `on_repetition_data_loaded`)\n            are called.\n            If defined then all existing datasources besides the ones specified will be returned.\n            The list contains strings with names of datasources.\n        on_experiment_data_loaded (list):\n            List of callback functions executed when experiment data is loaded.\n            Can be used to modify the data by changing or adding elements.\n            Form of the functions: func(exp_id: int, exp_data: AttrDict) -&gt; AttrDict.\n        on_repetition_data_loaded (list):\n            List of callback functions executed when repetition data is loaded.\n            Can be used to modify the data by changing or adding elements.\n            Form of the functions: func(exp_id: int, exp_data: AttrDict) -&gt; AttrDict.\n        allow_pickle (bool):\n            Indicates if loading of pickled objects is allowed.\n            Defaults to True. &lt;br&gt;\n            :warning: This could allow arbitrary code execution. Only load files you trust!\n\n    Raises:\n        ValueError: If both experiments_directory and experiment_descriptions are set.\n        ValueError: If both experiment_descriptions and any of (allowed_experiments_id_list or denied_experiments_id_list) are set.\n        ValueError: If both allowed_experiments_id_list and denied_experiments_id_list are set.\n        Exception: If data loading fails for an experiment or a repetition.\n\n    Returns:\n        data (AttrDict):\n            Loaded data.\n        experiment_descriptions (AttrDict):\n            Experiment descriptions of the loaded data.\n            See [`load_experiment_descriptions`][exputils.data.loading.load_experiment_descriptions] for details.\n    \"\"\"\n\n    if experiments_directory is not None and experiment_descriptions is not None:\n        raise ValueError('Can not set experiment_directory and experiment_descriptions at the same time!')\n\n    if experiment_descriptions is not None and (allowed_experiments_id_list is not None or denied_experiments_id_list is not None):\n        raise ValueError('experiment_descriptions and (allowed_experiments_id_list or denied_experiments_id_list) can not be set at the same time!')\n\n    if allowed_experiments_id_list is not None and denied_experiments_id_list is not None:\n        raise ValueError('allowed_experiments_id_list and denied_experiments_id_list can not be set at the same time!')\n\n    if experiment_descriptions is None:\n        experiment_descriptions = load_experiment_descriptions(\n            experiments_directory=experiments_directory,\n            allowed_experiments_id_list=allowed_experiments_id_list,\n            denied_experiments_id_list=denied_experiments_id_list\n        )\n    else:\n        experiment_descriptions = experiment_descriptions\n\n    if on_experiment_data_loaded is None:\n        on_experiment_data_loaded = []\n\n    if on_repetition_data_loaded is None:\n        on_repetition_data_loaded = []\n\n    # load experiments according to the order in the experiment_descriptions\n    sorted_experiment_ids = eu.data.get_ordered_experiment_ids_from_descriptions(experiment_descriptions)\n\n    data = collections.OrderedDict()\n    for exp_id in sorted_experiment_ids:\n        exp_descr = experiment_descriptions[exp_id]\n\n        if 'is_load_data' not in exp_descr or exp_descr['is_load_data']:\n            try:\n                data[exp_id] = load_single_experiment_data(\n                    exp_descr['directory'],\n                    data_directory=data_directory,\n                    allowed_data_filter=pre_allowed_data_filter,\n                    denied_data_filter=pre_denied_data_filter,\n                    allow_pickle=allow_pickle)\n\n                for callback_function in on_experiment_data_loaded:\n                    callback_function(exp_id, data[exp_id])\n\n                _filter_data(data[exp_id], post_allowed_data_filter, post_denied_data_filter)\n\n            except FileNotFoundError:\n                if not exp_descr.repetition_ids or not is_load_repetition_data:\n                    warnings.warn('Could find data for experiment {!r} ({!r}). Skipped ...'.format(exp_id, exp_descr['directory']))\n\n            except Exception as e:\n                raise Exception('Exception during loading of data for experiment {!r} ({!r})!'.format(exp_id, exp_descr['directory'])) from e\n\n            # load data of each repetition\n            if is_load_repetition_data:\n                if eu.REPETITION_DATA_KEY in data:\n                    warnings.warn('A statistic called {!r} was loaded for experiment data. Can not store repetition data under the same data source name. Skip to load repetition data. Please rename this statistic.'.format(eu.REPETITION_DATA_KEY))\n                else:\n                    cur_rep_statistics_dict = dict()\n                    for rep_id in exp_descr.repetition_ids:\n                        cur_rep_directory = os.path.join(exp_descr['directory'], eu.REPETITION_DIRECTORY_TEMPLATE.format(rep_id))\n                        try:\n                            cur_rep_statistics_dict[rep_id] = load_single_experiment_data(\n                                cur_rep_directory,\n                                data_directory=data_directory,\n                                allowed_data_filter=pre_allowed_data_filter,\n                                denied_data_filter=pre_denied_data_filter,\n                                allow_pickle=allow_pickle)\n\n                            for callback_function in on_repetition_data_loaded:\n                                callback_function(exp_id, rep_id, cur_rep_statistics_dict[rep_id])\n\n                            _filter_data(cur_rep_statistics_dict[rep_id], post_allowed_data_filter, post_denied_data_filter)\n\n                        except FileNotFoundError:\n                            warnings.warn('Could not find data for repetition {} of experiment {!r} ({!r}). Skipped ...'.format(rep_id, exp_id, exp_descr['directory']))\n\n                        except Exception as e:\n                            raise Exception('Exception during loading of data for repetition {} of experiment {!r} ({!r})!'.format(rep_id, exp_id, exp_descr['directory'])) from e\n\n                    if cur_rep_statistics_dict:\n                        # in case no experimental level data exists\n                        if exp_id not in data:\n                            data[exp_id] = AttrDict()\n\n                        data[exp_id][eu.REPETITION_DATA_KEY] = cur_rep_statistics_dict\n\n    return data, experiment_descriptions\n</code></pre>"},{"location":"reference/loading/#exputils.data.loading.load_single_experiment_data","title":"<code>load_single_experiment_data</code>","text":"<p>Loads data for a single experiment which includes all its repetition data.</p> <p>Parameters:</p> Name Type Description Default <code>experiment_directory</code> <code>str</code> <p>Path to the experiment directory.</p> required <code>data_directory</code> <code>str</code> <p>Relative path of the data directories under the experiments and repetitions. Defaults to <code>'./data'</code>.</p> <code>None</code> <code>allowed_data_filter</code> <code>list</code> <p>List of datasource names (strings) that will be loaded. If defined then only these datasources will be loaded.</p> <code>None</code> <code>denied_data_filter</code> <code>list</code> <p>List of datasource names (strings) that will NOT be loaded. If defined then all datasources besides the specified ones will be loaded.</p> <code>None</code> <code>allow_pickle</code> <code>bool</code> <p>Indicates if loading of pickled objects is allowed. Defaults to True.   This could allow arbitrary code execution. Only load files you trust!</p> <code>True</code> <p>Returns:</p> Name Type Description <code>data</code> <code>AttrDict</code> <p>A dictionary containing the loaded data.</p> Source code in <code>exputils/data/loading.py</code> <pre><code>def load_single_experiment_data(experiment_directory: str,\n                                data_directory: Optional[str] = None,\n                                allowed_data_filter: Optional[list] = None,\n                                denied_data_filter: Optional[list] = None,\n                                allow_pickle: bool = True) -&gt; AttrDict:\n    \"\"\"\n    Loads data for a single experiment which includes all its repetition data.\n\n    Parameters:\n        experiment_directory (str):\n            Path to the experiment directory.\n        data_directory (str):\n            Relative path of the data directories under the experiments and repetitions.\n            Defaults to `'./data'`.\n        allowed_data_filter (list):\n            List of datasource names (strings) that will be loaded.\n            If defined then only these datasources will be loaded.\n        denied_data_filter (list):\n            List of datasource names (strings) that will NOT be loaded.\n            If defined then all datasources besides the specified ones will be loaded.\n        allow_pickle (bool):\n            Indicates if loading of pickled objects is allowed.\n            Defaults to True. &lt;br&gt;\n            :warning: This could allow arbitrary code execution. Only load files you trust!\n\n    Returns:\n        data (AttrDict):\n            A dictionary containing the loaded data.\n    \"\"\"\n\n    if data_directory is None:\n        data_directory = eu.DEFAULT_DATA_DIRECTORY\n\n    # need to allow also logging to be able to load data that is in logging.npz files\n    if allowed_data_filter is not None:\n        allowed_data_filter.append('logging')\n\n    data = eu.io.load_numpy_files(\n        os.path.join(experiment_directory, data_directory),\n        allowed_data_filter=allowed_data_filter,\n        denied_data_filter=denied_data_filter,\n        allow_pickle=allow_pickle)\n\n    # TODO: Refactor - make loading of npz files without the 'logging' sub-directory as a general cases\n    if 'logging' in data:\n        data.update(data['logging'])\n        del data['logging']\n\n    return data\n</code></pre>"},{"location":"reference/loading/#exputils.data.loading.load_experiment_data_single_object","title":"<code>load_experiment_data_single_object</code>","text":"<p>Loads single object that was logged via the add_single_object. function and saved as a dill file. The file that is either located under the experiments, or a single experiment or repetition directory.</p> <p> This could allow arbitrary code execution. Only load files you trust!</p> Example <pre><code>loaded_obj = load_experiment_data_single_object(\n    'my_object',  # name of the object\n    experiment_id=100,\n    repetition_id=1\n)\nprint(loaded_obj)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the object which is the name of the dill file with or without extension.</p> required <code>experiment_id</code> <code>int</code> <p>An optional identifier for a specific experiment. If not provided, then the object is loaded from the experiments directory.</p> <code>None</code> <code>repetition_id</code> <code>int</code> <p>An optional identifier for a specific repetition of the experiment. If not provided, then the object is loaded from the experiments or experiment directory.</p> <code>None</code> <code>experiments_directory</code> <code>str</code> <p>The root directory where all experiments are stored. Defaults to <code>..\\experiments</code>.</p> <code>None</code> <code>data_directory</code> <code>str</code> <p>Relative path of the data directories under the experiments and repetitions. Defaults to <code>'./data'</code>.</p> <code>None</code> <code>experiment_directory_template</code> <code>str</code> <p>Name template of experiment directories. Defaults to <code>'experiment_{:06d}'</code>.</p> <code>None</code> <code>repetition_directory_template</code> <code>str</code> <p>Template for constructing the repetition directory. Defaults to None. Name template of repetition directories. Defaults to <code>'repetition_{:06d}'</code>.</p> <code>None</code> <code>add_execution_directory_to_sys_path</code> <code>bool</code> <p>Whether to add the execution directory to the system path temporailly while loading the object. This can be necessary if the object has relational import statements. By adding the directory where the object is located temporailly to the python path, these import statments can be processed correctly. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>object</code> <code>object</code> <p>The loaded experiment data object.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified data file does not exist.</p> Source code in <code>exputils/data/loading.py</code> <pre><code>def load_experiment_data_single_object(name: str,\n                                       experiment_id: Optional[int] = None,\n                                       repetition_id: Optional[int] = None,\n                                       experiments_directory: Optional[str] = None,\n                                       data_directory: Optional[str] = None,\n                                       experiment_directory_template: Optional[str] = None,\n                                       repetition_directory_template: Optional[str] = None,\n                                       add_execution_directory_to_sys_path: bool = True) -&gt; object:\n    \"\"\"\n    Loads single object that was logged via the [add_single_object][exputils.data.logging.add_single_object].\n    function and saved as a dill file. The file that is either located under the experiments, or a\n    single experiment or repetition directory.\n\n    :warning: This could allow arbitrary code execution. Only load files you trust!\n\n    Example:\n        ```python\n        loaded_obj = load_experiment_data_single_object(\n            'my_object',  # name of the object\n            experiment_id=100,\n            repetition_id=1\n        )\n        print(loaded_obj)\n        ```\n\n    Parameters:\n        name (str):\n            The name of the object which is the name of the dill file with or without extension.\n        experiment_id (int):\n            An optional identifier for a specific experiment.\n            If not provided, then the object is loaded from the experiments directory.\n        repetition_id (int):\n            An optional identifier for a specific repetition of the experiment.\n            If not provided, then the object is loaded from the experiments or experiment directory.\n        experiments_directory (str):\n            The root directory where all experiments are stored.\n            Defaults to `..\\experiments`.\n        data_directory (str):\n            Relative path of the data directories under the experiments and repetitions.\n            Defaults to `'./data'`.\n        experiment_directory_template (str):\n            Name template of experiment directories.\n            Defaults to `'experiment_{:06d}'`.\n        repetition_directory_template (str): Template for constructing the repetition directory. Defaults to None.\n            Name template of repetition directories.\n            Defaults to `'repetition_{:06d}'`.\n        add_execution_directory_to_sys_path (bool):\n            Whether to add the execution directory to the system path temporailly while loading the object.\n            This can be necessary if the object has relational import statements.\n            By adding the directory where the object is located temporailly to the python path,\n            these import statments can be processed correctly.\n            Defaults to True.\n\n    Returns:\n        object: The loaded experiment data object.\n\n    Raises:\n        FileNotFoundError: If the specified data file does not exist.\n    \"\"\"\n\n\n    if experiments_directory is None:\n        experiments_directory = os.path.join('..', eu.DEFAULT_EXPERIMENTS_DIRECTORY)\n\n    full_execution_dir_path = experiments_directory\n\n    # only add experiment subfolder if needed\n    if experiment_id is not None:\n\n        if experiment_directory_template is None:\n            experiment_directory_template = eu.EXPERIMENT_DIRECTORY_TEMPLATE\n\n        experiment_directory = experiment_directory_template.format(experiment_id)\n\n        full_execution_dir_path = os.path.join(full_execution_dir_path, experiment_directory)\n\n        # only add repetition subfolder if needed\n        if repetition_id is not None:\n\n            if repetition_directory_template is None:\n                repetition_directory_template = eu.REPETITION_DIRECTORY_TEMPLATE\n\n            repetition_directory = repetition_directory_template.format(repetition_id)\n\n            full_execution_dir_path = os.path.join(full_execution_dir_path, repetition_directory)\n\n    if data_directory is None:\n        data_directory = eu.DEFAULT_DATA_DIRECTORY\n\n    # construct the full path to the module\n    full_dill_path = os.path.join(full_execution_dir_path, data_directory, name)\n\n    # add the directory in which the code was executed to system path\n    if add_execution_directory_to_sys_path:\n        sys.path.append(full_execution_dir_path)\n\n    obj = eu.io.dill.load_dill(full_dill_path)\n\n    if add_execution_directory_to_sys_path:\n        sys.path.pop()\n\n    return obj\n</code></pre>"},{"location":"reference/loading/#exputils.data.loading.load_experiment_python_module","title":"<code>load_experiment_python_module</code>","text":"<p>Loads a Python module dynamically that is either located under the experiments, or a single experiment or repetition directory. This can be used to load for example the configuration file of a repetition.</p> Example <pre><code># load the configuration file of a repetition and print its config dictionary\nconfig_module = load_experiment_python_module(\n    'repetition_config.py',  # name of the configuration file\n    experiment_id=100,\n    repetition_id=3\n)\nprint(config_module.config)\n</code></pre> <p> This could allow arbitrary code execution. Only load files you trust!</p> <p>Parameters:</p> Name Type Description Default <code>module_path</code> <code>str</code> <p>The realtive path to the python module file either under the experiments, experiment, or repetition directory. Which level depends on if an experiment_id and a repetition_id are provided or not.</p> required <code>experiment_id</code> <code>int</code> <p>An optional identifier for a specific experiment. If not provided, then the module is loaded from the experiments directory.</p> <code>None</code> <code>repetition_id</code> <code>int</code> <p>An optional identifier for a specific repetition of the experiment. If not provided, then the module is loaded from the experiments or experiment directory.</p> <code>None</code> <code>experiments_directory</code> <code>str</code> <p>The root directory where all experiments are stored. Defaults to <code>..\\experiments</code>.</p> <code>None</code> <code>exec_module</code> <code>bool</code> <p>If True, the module will be executed after being loaded which means it will be imported. Defaults to True.</p> <code>True</code> <code>experiment_directory_template</code> <code>str</code> <p>Name template of experiment directories. Defaults to <code>'experiment_{:06d}'</code>.</p> <code>None</code> <code>repetition_directory_template</code> <code>str</code> <p>Template for constructing the repetition directory. Defaults to None. Name template of repetition directories. Defaults to <code>'repetition_{:06d}'</code>.</p> <code>None</code> <code>add_execution_directory_to_sys_path</code> <code>bool</code> <p>If True, the script's execution directory will be added to sys.path. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>module</code> <code>ModuleType</code> <p>The loaded Python module object.</p> Source code in <code>exputils/data/loading.py</code> <pre><code>def load_experiment_python_module(module_path: str,\n                                  experiment_id: Optional[int] = None,\n                                  repetition_id: Optional[int] = None,\n                                  experiments_directory: Optional[str] = None,\n                                  exec_module: bool = True,\n                                  experiment_directory_template: Optional[str] = None,\n                                  repetition_directory_template: Optional[str] = None,\n                                  add_execution_directory_to_sys_path: bool = True) -&gt; ModuleType:\n    \"\"\"\n    Loads a Python module dynamically that is either located under the experiments, or a single\n    experiment or repetition directory.\n    This can be used to load for example the configuration file of a repetition.\n\n    Example:\n        ```python\n        # load the configuration file of a repetition and print its config dictionary\n        config_module = load_experiment_python_module(\n            'repetition_config.py',  # name of the configuration file\n            experiment_id=100,\n            repetition_id=3\n        )\n        print(config_module.config)\n        ```\n\n    :warning: This could allow arbitrary code execution. Only load files you trust!\n\n    Parameters:\n        module_path (str):\n            The realtive path to the python module file either under the experiments, experiment, or\n            repetition directory.\n            Which level depends on if an experiment_id and a repetition_id are provided or not.\n        experiment_id (int):\n            An optional identifier for a specific experiment.\n            If not provided, then the module is loaded from the experiments directory.\n        repetition_id (int):\n            An optional identifier for a specific repetition of the experiment.\n            If not provided, then the module is loaded from the experiments or experiment directory.\n        experiments_directory (str):\n            The root directory where all experiments are stored.\n            Defaults to `..\\experiments`.\n        exec_module (bool):\n            If True, the module will be executed after being loaded which means it will be imported.\n            Defaults to True.\n        experiment_directory_template (str):\n            Name template of experiment directories.\n            Defaults to `'experiment_{:06d}'`.\n        repetition_directory_template (str): Template for constructing the repetition directory. Defaults to None.\n            Name template of repetition directories.\n            Defaults to `'repetition_{:06d}'`.\n        add_execution_directory_to_sys_path (bool):\n            If True, the script's execution directory will be added to sys.path.\n            Defaults to True.\n\n    Returns:\n        module (ModuleType): The loaded Python module object.\n\n    \"\"\"\n\n    if experiments_directory is None:\n        experiments_directory = os.path.join('..', eu.DEFAULT_EXPERIMENTS_DIRECTORY)\n\n    full_module_path = experiments_directory\n\n    # only add experiment subfolder if needed\n    if experiment_id is not None:\n\n        if experiment_directory_template is None:\n            experiment_directory_template = eu.EXPERIMENT_DIRECTORY_TEMPLATE\n\n        experiment_directory = experiment_directory_template.format(experiment_id)\n\n        full_module_path = os.path.join(full_module_path, experiment_directory)\n\n        # only add repetition subfolder if needed\n        if repetition_id is not None:\n\n            if repetition_directory_template is None:\n                repetition_directory_template = eu.REPETITION_DIRECTORY_TEMPLATE\n\n            repetition_directory = repetition_directory_template.format(repetition_id)\n\n            full_module_path = os.path.join(full_module_path, repetition_directory)\n\n    # construct the full path to the module\n    full_module_path = os.path.join(full_module_path, module_path)\n\n    filename = os.path.basename(module_path)\n    module_name = filename.replace('.py', '')\n\n    spec = importlib.util.spec_from_file_location(module_name, full_module_path)\n\n    # creates a new module based on spec\n    module = importlib.util.module_from_spec(spec)\n\n    if exec_module:\n        # add the directory in which the code was executed to system path\n        if add_execution_directory_to_sys_path:\n            sys.path.append(os.path.dirname(full_module_path))\n\n        spec.loader.exec_module(module)\n\n        if add_execution_directory_to_sys_path:\n            sys.path.pop()\n\n    return module\n</code></pre>"},{"location":"reference/logging/","title":"Logging","text":"<p>Functions to log data for experiments.</p> <p>All functions can be accessed under the module: <code>exputils.data.logging</code></p>"},{"location":"reference/logging/#usage","title":"Usage","text":"<p>Import the logging module and use directly its functions to log values or objects.  It is not necessary to create a logging object.</p> <p>Scalars and arrays will be logged as numpy arrays in the memory. To write the logged values to a file it is necessary to call the save function.</p> <p>Example: </p> <pre><code># import the logging module as log\nimport exputils.data.logging as log\n\n# use the log to log some scalars under the name 'val'\nfor i in range(10):\n    log.add_value('val', i)\n\n# save the log, only then will the log be written from memory to a file!\nlog.save()\n</code></pre>"},{"location":"reference/logging/#writting","title":"Writting","text":""},{"location":"reference/logging/#exputils.data.logging.add_histogram","title":"<code>add_histogram</code>","text":"<p>Adds a histogram which is a one-dimensional array a log entry with optional parallel TensorBoard logging.</p> <p>This allows to add the values as a histogram plot to TensorBoard.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the entry where the value is added.</p> required <code>values</code> <code>Any</code> <p>The array of values to be added.</p> required <code>log_to_tb</code> <code>bool</code> <p>Defines of the value should be logged to TensorBoard in parallel to the standard log. If True, log the value to TensorBoard. If False, do not log the value to TensorBoard. If not specified, then it gets logged if TensorBoard is globally activated. See activate_tensorboard for more details.</p> <code>None</code> <code>tb_global_step</code> <code>int</code> <p>If logging to TensorBoard is active, then this is the global step value to record with the value in TensorBoard.</p> <code>None</code> <code>tb_walltime</code> <code>float</code> <p>If logging to TensorBoard is active, then this is an optional override for the walltime in TensorBoard.</p> <code>None</code> Source code in <code>exputils/data/logging.py</code> <pre><code>def add_histogram(name: str,\n                  values,\n                  log_to_tb: Optional[bool] = None,\n                  tb_global_step: Optional[int] = None,\n                  tb_walltime: Optional[float] = None):\n    \"\"\"\n    Adds a histogram which is a one-dimensional array a log entry with optional parallel TensorBoard\n    logging.\n\n    This allows to add the values as a histogram plot to TensorBoard.\n\n    Parameters:\n        name (str):\n            The name of the entry where the value is added.\n        values (Any):\n            The array of values to be added.\n        log_to_tb (bool):\n            Defines of the value should be logged to TensorBoard in parallel to the standard log.\n            If True, log the value to TensorBoard.\n            If False, do not log the value to TensorBoard.\n            If not specified, then it gets logged if TensorBoard is globally activated.\n            See [activate_tensorboard][exputils.data.logging.activate_tensorboard] for more details.\n        tb_global_step (int):\n            If logging to TensorBoard is active, then this is the global step value to record with\n            the value in TensorBoard.\n        tb_walltime (float):\n            If logging to TensorBoard is active, then this is an optional override for the walltime\n            in TensorBoard.\n    \"\"\"\n    log.add_histogram(name, values, log_to_tb, tb_global_step, tb_walltime)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.add_object","title":"<code>add_object</code>","text":"<p>Adds an object to a log entry. Objects are stored in a list and saved as dill files.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the log entry where the object is added.</p> required <code>obj</code> <code>object</code> <p>The object to be added to the log.</p> required Source code in <code>exputils/data/logging.py</code> <pre><code>def add_object(name: str,\n               obj: object):\n    \"\"\"\n    Adds an object to a log entry. Objects are stored in a list and saved as dill files.\n\n    Parameters:\n        name (str):\n            The name of the log entry where the object is added.\n        obj (object):\n            The object to be added to the log.\n    \"\"\"\n    log.add_object(name, obj)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.add_scalar","title":"<code>add_scalar</code>","text":"<p>Adds a scalar value to a log entry with optional parallel TensorBoard logging.</p> <p>Note: Has the same functionality as add_value and exists to have a similar named log function as TensorBoard.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the entry where the value is added.</p> required <code>scalar</code> <code>Any</code> <p>The scalar value to be added.</p> required <code>log_to_tb</code> <code>bool</code> <p>Defines of the value should be logged to TensorBoard in parallel to the standard log. If True, log the value to TensorBoard. If False, do not log the value to TensorBoard. If not specified, then it gets logged if TensorBoard is globally activated. See activate_tensorboard for more details.</p> <code>None</code> <code>tb_global_step</code> <code>int</code> <p>If logging to TensorBoard is active, then this is the global step value to record with the value in TensorBoard.</p> <code>None</code> <code>tb_walltime</code> <code>float</code> <p>If logging to TensorBoard is active, then this is an optional override for the walltime in TensorBoard.</p> <code>None</code> Source code in <code>exputils/data/logging.py</code> <pre><code>def add_scalar(name: str,\n              scalar,\n              log_to_tb: Optional[bool] = None,\n              tb_global_step: Optional[int] = None,\n              tb_walltime: Optional[float] = None):\n    \"\"\"\n    Adds a scalar value to a log entry with optional parallel TensorBoard logging.\n\n    Note: Has the same functionality as [add_value][exputils.data.logging.add_value] and exists to\n    have a similar named log function as TensorBoard.\n\n    Parameters:\n        name (str):\n            The name of the entry where the value is added.\n        scalar (Any):\n            The scalar value to be added.\n        log_to_tb (bool):\n            Defines of the value should be logged to TensorBoard in parallel to the standard log.\n            If True, log the value to TensorBoard.\n            If False, do not log the value to TensorBoard.\n            If not specified, then it gets logged if TensorBoard is globally activated.\n            See [activate_tensorboard][exputils.data.logging.activate_tensorboard] for more details.\n        tb_global_step (int):\n            If logging to TensorBoard is active, then this is the global step value to record with\n            the value in TensorBoard.\n        tb_walltime (float):\n            If logging to TensorBoard is active, then this is an optional override for the walltime\n            in TensorBoard.\n    \"\"\"\n    log.add_scalar(name, scalar, log_to_tb, tb_global_step, tb_walltime)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.add_single_object","title":"<code>add_single_object</code>","text":"<p>Logs a single object which is directly written to a dill file and not stored in memory.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the object which is used for the filename.</p> required <code>obj</code> <code>object</code> <p>The object to be logged.</p> required <code>directory</code> <code>str</code> <p>Optional directory path where the dill file for the object is saved. Default is the log directory.</p> <code>None</code> Source code in <code>exputils/data/logging.py</code> <pre><code>def add_single_object(name: str,\n                      obj: object,\n                      directory: Optional[str] = None):\n    \"\"\"\n    Logs a single object which is directly written to a dill file and not stored in memory.\n\n    Parameters:\n        name (str):\n            The name of the object which is used for the filename.\n        obj (object):\n            The object to be logged.\n        directory (str):\n            Optional directory path where the dill file for the object is saved.\n            Default is the log directory.\n    \"\"\"\n    log.add_single_object(name, obj, directory=directory)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.add_value","title":"<code>add_value</code>","text":"<p>Adds a value to a log entry with optional parallel TensorBoard logging.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the entry where the value is added.</p> required <code>value</code> <code>Any</code> <p>The value to be added. Can be a scalar or an array.</p> required <code>log_to_tb</code> <code>bool</code> <p>Defines of the value should be logged to TensorBoard in parallel to the standard log. If True, log the value to TensorBoard. If False, do not log the value to TensorBoard. If not specified, then it gets logged if TensorBoard is globally activated. See activate_tensorboard for more details.</p> <code>None</code> <code>tb_global_step</code> <code>int</code> <p>If logging to TensorBoard is active, then this is the global step value to record with the value in TensorBoard.</p> <code>None</code> <code>tb_walltime</code> <code>float</code> <p>If logging to TensorBoard is active, then this is an optional override for the walltime in TensorBoard.</p> <code>None</code> Source code in <code>exputils/data/logging.py</code> <pre><code>def add_value(name: str,\n              value,\n              log_to_tb: Optional[bool] = None,\n              tb_global_step: Optional[int] = None,\n              tb_walltime: Optional[float] = None):\n    \"\"\"\n    Adds a value to a log entry with optional parallel TensorBoard logging.\n\n    Parameters:\n        name (str):\n            The name of the entry where the value is added.\n        value (Any):\n            The value to be added. Can be a scalar or an array.\n        log_to_tb (bool):\n            Defines of the value should be logged to TensorBoard in parallel to the standard log.\n            If True, log the value to TensorBoard.\n            If False, do not log the value to TensorBoard.\n            If not specified, then it gets logged if TensorBoard is globally activated.\n            See [activate_tensorboard][exputils.data.logging.activate_tensorboard] for more details.\n        tb_global_step (int):\n            If logging to TensorBoard is active, then this is the global step value to record with\n            the value in TensorBoard.\n        tb_walltime (float):\n            If logging to TensorBoard is active, then this is an optional override for the walltime\n            in TensorBoard.\n    \"\"\"\n    log.add_value(name, value, log_to_tb, tb_global_step, tb_walltime)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.save","title":"<code>save</code>","text":"<p>Saves the log. All logged values are stored in memory and only written to disk when this function is called.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Optional directory path where the dill file for the object is saved. Default is the log directory.</p> <code>None</code> Source code in <code>exputils/data/logging.py</code> <pre><code>def save(directory: Optional[str] = None):\n    \"\"\"\n    Saves the log.\n    All logged values are stored in memory and only written to disk when this function is called.\n\n    Parameters:\n        directory (str):\n            Optional directory path where the dill file for the object is saved.\n            Default is the log directory.\n    \"\"\"\n    log.save(directory=directory)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.clear","title":"<code>clear</code>","text":"<p>Clears the data of all or a specific log entry.</p> <p> Data that has been logged after the save function was called will be lost.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the log entry. If no name is given, then all log entries will be cleared.</p> <code>None</code> Source code in <code>exputils/data/logging.py</code> <pre><code>def clear(name: Optional[str] = None):\n    \"\"\"\n    Clears the data of all or a specific log entry.\n\n    :warning: Data that has been logged after the [save][exputils.data.logging.save] function\n    was called will be lost.\n\n    Parameters:\n        name (str):\n            Name of the log entry.\n            If no name is given, then all log entries will be cleared.\n    \"\"\"\n    log.clear(name=name)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.reset","title":"<code>reset</code>","text":"<p>Resets the log which deletes all data in the memory and resets all changed configuration such as the directory path of the log.</p> <p> Data that has been logged after the save function was called will be lost.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def reset():\n    \"\"\"\n    Resets the log which deletes all data in the memory and resets all changed configuration such\n    as the directory path of the log.\n\n    :warning: Data that has been logged after the [save][exputils.data.logging.save] function\n    was called will be lost.\n    \"\"\"\n    global log\n    log = Logger()\n</code></pre>"},{"location":"reference/logging/#loading","title":"Loading","text":"<p>Values that were logged can also be accessed. It is also possible to load a complete log from disk. This can be used to continue experiment and add new values to an existing log.</p>"},{"location":"reference/logging/#exputils.data.logging.contains","title":"<code>contains</code>","text":"<p>Check if a log entry for the given name exists.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to be checked in the log.</p> required <p>Returns:</p> Name Type Description <code>is_contained</code> <code>bool</code> <p>True if a log for the name exists, otherwise False.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def contains(name: str) -&gt; bool:\n    \"\"\"\n    Check if a log entry for the given name exists.\n\n    Parameters:\n        name (str): The name to be checked in the log.\n\n    Returns:\n        is_contained (bool): True if a log for the name exists, otherwise False.\n    \"\"\"\n    return (name in log)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.items","title":"<code>items</code>","text":"<p>Returns all log entries as a list of tuples with the name and values of the entries.</p> <p>Returns:</p> Name Type Description <code>entries</code> <code>list</code> <p>All logged entries.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def items() -&gt; list:\n    \"\"\"\n    Returns all log entries as a list of tuples with the name and values of the entries.\n\n    Returns:\n        entries (list): All logged entries.\n    \"\"\"\n    return log.items()\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.get_item","title":"<code>get_item</code>","text":"<p>Returns the logged data for a certain entry.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the log entry.</p> required <p>Returns:</p> Type Description <code>object</code> <p>Logged data. Usually in form of a numpy array.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def get_item(name: str) -&gt; object:\n    \"\"\"\n    Returns the logged data for a certain entry.\n\n    Parameters:\n        name (str):\n            Name of the log entry.\n\n    Returns:\n        Logged data. Usually in form of a numpy array.\n    \"\"\"\n    return log[name]\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.get_values","title":"<code>get_values</code>","text":"<p>Returns the logged data for a certain entry.</p> <p>Note: Has the same functionality as get_item and exists to have a similar named log function as TensorBoard.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the log entry.</p> required <p>Returns:</p> Type Description <p>Logged data. Usually in form of a numpy array.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def get_values(name: str):\n    \"\"\"\n    Returns the logged data for a certain entry.\n\n    Note: Has the same functionality as [get_item][exputils.data.logging.get_item] and exists to\n    have a similar named log function as TensorBoard.\n\n    Parameters:\n        name (str):\n            Name of the log entry.\n\n    Returns:\n        Logged data. Usually in form of a numpy array.\n    \"\"\"\n    return log[name]\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.get_objects","title":"<code>get_objects</code>","text":"<p>Returns the logged objects for a certain entry.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the log entry.</p> required <p>Returns:</p> Name Type Description <code>objects</code> <code>list</code> <p>Logged objects.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def get_objects(name: str) -&gt; list:\n    \"\"\"\n    Returns the logged objects for a certain entry.\n\n    Args:\n        name (str): Name of the log entry.\n\n    Returns:\n        objects (list): Logged objects.\n    \"\"\"\n    return log[name]\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.load","title":"<code>load</code>","text":"<p>Loads entries from a log directory into the log. Afterwards the loaded entries can be accessed via the items and get_item functions.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Optional directory path where the dill file for the object is saved. Default is the log directory.</p> <code>None</code> <code>load_objects</code> <code>bool</code> <p>True if objects (dill files) that are in the directory should also be loaded. Default is False to avoid unintended large loads of objects.</p> <code>False</code> Source code in <code>exputils/data/logging.py</code> <pre><code>def load(directory: Optional[str] = None,\n         load_objects: bool = False):\n    \"\"\"\n    Loads entries from a log directory into the log.\n    Afterwards the loaded entries can be accessed via the [items][exputils.data.logging.items] and\n    [get_item][exputils.data.logging.get_item] functions.\n\n    Parameters:\n        directory (str):\n            Optional directory path where the dill file for the object is saved.\n            Default is the log directory.\n        load_objects (bool):\n            True if objects (dill files) that are in the directory should also be loaded.\n            Default is False to avoid unintended large loads of objects.\n    \"\"\"\n    log.load(directory=directory, load_objects=load_objects)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.load_single_object","title":"<code>load_single_object</code>","text":"<p>Loads a single object from the log folder and returns it. The object is not stored in the log memory.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the object which is used for the filename. Either with or without the <code>'.dill'</code> extension.</p> required <p>Returns:</p> Name Type Description <code>obj</code> <code>object</code> <p>Loaded object.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def load_single_object(name: str) -&gt; object:\n    \"\"\"\n    Loads a single object from the log folder and returns it.\n    The object is not stored in the log memory.\n\n    Parameters:\n        name (str):\n            Name of the object which is used for the filename.\n            Either with or without the `'.dill'` extension.\n\n    Returns:\n        obj (object): Loaded object.\n    \"\"\"\n    return log.load_single_object(name)\n</code></pre>"},{"location":"reference/logging/#configuration","title":"Configuration","text":"<p>The log has different configuration options such as the default log directory it is using.</p>"},{"location":"reference/logging/#exputils.data.logging.get_directory","title":"<code>get_directory</code>","text":"<p>Returns the path to the directory the log.</p> <p>Returns:</p> Name Type Description <code>directory</code> <code>str</code> <p>Path to the directory.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def get_directory() -&gt; str:\n    \"\"\"\n    Returns the path to the directory the log.\n\n    Returns:\n        directory (str):\n            Path to the directory.\n    \"\"\"\n    return log.directory\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.set_directory","title":"<code>set_directory</code>","text":"<p>Sets the directory path under which the logs will be saved. The default is <code>./data</code>.</p> <p>If the directory does not exist it will be created.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>Path to the directory.</p> required Source code in <code>exputils/data/logging.py</code> <pre><code>def set_directory(directory: str):\n    \"\"\"\n    Sets the directory path under which the logs will be saved.\n    The default is `./data`.\n\n    If the directory does not exist it will be created.\n\n    Parameters:\n        directory (str):\n            Path to the directory.\n\n    \"\"\"\n    log.directory = directory\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.set_config","title":"<code>set_config</code>","text":"<p>Sets the config of the log.</p> <p>:param config: Dictionary with config parameters. :param kwargs: Arguments list of config parameters.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def set_config(config=None, **kwargs):\n    \"\"\"\n    Sets the config of the log.\n\n    :param config: Dictionary with config parameters.\n    :param kwargs: Arguments list of config parameters.\n    \"\"\"\n    log.config = eu.combine_dicts(kwargs, config, log.config)\n</code></pre>"},{"location":"reference/logging/#tensorboard","title":"Tensorboard","text":"<p>The log has the ability to log values in parallel to Tensorboard which can be used to visualize them while an experiment is running.</p>"},{"location":"reference/logging/#exputils.data.logging.tensorboard","title":"<code>tensorboard</code>","text":"<p>The tensorboard SummaryWriter that is used to log data to the tensorboard.</p> <p>Returns:</p> Name Type Description <code>writer</code> <code>SummaryWriter</code> <p>Tensorboard SummaryWriter used to log data to the tensorboard.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def tensorboard():\n    \"\"\"The tensorboard SummaryWriter that is used to log data to the tensorboard.\n\n    Returns:\n        writer (SummaryWriter): Tensorboard SummaryWriter used to log data to the tensorboard.\n    \"\"\"\n    return log.tensorboard\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.create_tensorboard","title":"<code>create_tensorboard</code>","text":"<p>Creates a tensorboard that can be used for logging.</p> <p>:param config (dict): Dictionary with the configuration of the tensorboard. Has the same entries as the parameters below. (default = None) :param log_dir (string): Save directory location. Default is experiments/tensorboard_logs/exp_/rep_/_. :param purge_step (int): When logging crashes at step T+XT+XT+X and restarts at step TTT, any events whose global_step larger or equal to TTT     will be purged and hidden from TensorBoard. Note that crashed and resumed experiments should have the same log_dir. :param: max_queue (int): Size of the queue for pending events and summaries before one of the \u2018add\u2019 calls forces a flush to disk. (default = 10) :param flush_secs (int): How often, in seconds, to flush the pending events and summaries to disk. (default = 120) :param filename_suffix (string): Suffix added to all event filenames in the log_dir directory. (default = '.tblog') <p>:return: SummaryWriter of the tensorboard (See https://pytorch.org/docs/stable/tensorboard.html).</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def create_tensorboard(config=None, **kwargs):\n    \"\"\"\n    Creates a tensorboard that can be used for logging.\n\n    :param config (dict): Dictionary with the configuration of the tensorboard. Has the same entries as the parameters below. (default = None)\n    :param log_dir (string): Save directory location. Default is experiments/tensorboard_logs/exp_&lt;experiment_id&gt;/rep_&lt;repetition_id&gt;/&lt;date&gt;_&lt;time&gt;.\n    :param purge_step (int): When logging crashes at step T+XT+XT+X and restarts at step TTT, any events whose global_step larger or equal to TTT\n        will be purged and hidden from TensorBoard. Note that crashed and resumed experiments should have the same log_dir.\n    :param: max_queue (int): Size of the queue for pending events and summaries before one of the \u2018add\u2019 calls forces a flush to disk. (default = 10)\n    :param flush_secs (int): How often, in seconds, to flush the pending events and summaries to disk. (default = 120)\n    :param filename_suffix (string): Suffix added to all event filenames in the log_dir directory. (default = '.tblog')\n\n    :return: SummaryWriter of the tensorboard (See https://pytorch.org/docs/stable/tensorboard.html).\n    \"\"\"\n\n    return log.create_tensorboard(config=config, **kwargs)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.activate_tensorboard","title":"<code>activate_tensorboard</code>","text":"<p>Activates a tensorboard that can be used for logging. If it is activated, then when the function add_value/add_scalar is used and a scalar is given, the tensorboard automatically logs it too. Creates a tensorboard if non existed so far.</p> <p>:param config (dict): Dictionary with the configuration of the tensorboard. Has the same entries as the parameters below. (default = None) :param log_dir (string): Save directory location. Default is experiments/tensorboard_logs/exp_/rep_/_. :param purge_step (int): When logging crashes at step T+XT+XT+X and restarts at step TTT, any events whose global_step larger or equal to TTT     will be purged and hidden from TensorBoard. Note that crashed and resumed experiments should have the same log_dir. :param: max_queue (int): Size of the queue for pending events and summaries before one of the \u2018add\u2019 calls forces a flush to disk. (default = 10) :param flush_secs (int): How often, in seconds, to flush the pending events and summaries to disk. (default = 120) :param filename_suffix (string): Suffix added to all event filenames in the log_dir directory. (default = '.tblog') <p>:return: SummaryWriter of the tensorboard (See https://pytorch.org/docs/stable/tensorboard.html).</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def activate_tensorboard(config=None, **kwargs):\n    \"\"\"\n    Activates a tensorboard that can be used for logging.\n    If it is activated, then when the function add_value/add_scalar is used and a scalar is given, the tensorboard automatically logs it too.\n    Creates a tensorboard if non existed so far.\n\n    :param config (dict): Dictionary with the configuration of the tensorboard. Has the same entries as the parameters below. (default = None)\n    :param log_dir (string): Save directory location. Default is experiments/tensorboard_logs/exp_&lt;experiment_id&gt;/rep_&lt;repetition_id&gt;/&lt;date&gt;_&lt;time&gt;.\n    :param purge_step (int): When logging crashes at step T+XT+XT+X and restarts at step TTT, any events whose global_step larger or equal to TTT\n        will be purged and hidden from TensorBoard. Note that crashed and resumed experiments should have the same log_dir.\n    :param: max_queue (int): Size of the queue for pending events and summaries before one of the \u2018add\u2019 calls forces a flush to disk. (default = 10)\n    :param flush_secs (int): How often, in seconds, to flush the pending events and summaries to disk. (default = 120)\n    :param filename_suffix (string): Suffix added to all event filenames in the log_dir directory. (default = '.tblog')\n\n    :return: SummaryWriter of the tensorboard (See https://pytorch.org/docs/stable/tensorboard.html).\n    \"\"\"\n\n    return log.activate_tensorboard(config=config, **kwargs)\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.deactivate_tensorboard","title":"<code>deactivate_tensorboard</code>","text":"<p>Deactivates tensorboard logging. Afterwards, values will not be automatically logged via the add_value / add_scalar function to the tensorboard.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def deactivate_tensorboard():\n    \"\"\"\n    Deactivates tensorboard logging.\n    Afterwards, values will not be automatically logged via the add_value / add_scalar function\n    to the tensorboard.\n    \"\"\"\n    return log.deactivate_tensorboard()\n</code></pre>"},{"location":"reference/logging/#exputils.data.logging.is_tensorboard_active","title":"<code>is_tensorboard_active</code>","text":"<p>Returns true, if the tensorboard is active.</p> <p>Returns:</p> Name Type Description <code>is_active</code> <code>bool</code> <p>True if the tensorboard is active, otherwise False.</p> Source code in <code>exputils/data/logging.py</code> <pre><code>def is_tensorboard_active() -&gt; bool:\n    \"\"\"Returns true, if the tensorboard is active.\n\n    Returns:\n        is_active (bool): True if the tensorboard is active, otherwise False.\n    \"\"\"\n    return log.is_tensorboard_active\n</code></pre>"},{"location":"reference/overview/","title":"Overview","text":""},{"location":"reference/overview/#default-variables","title":"Default Variables","text":"<p>The package has a list of default variables located on the module level that mainly control the names of the generated  directories. They can be adjusted if needed.</p> Name Type Description Default <code>DEFAULT_ODS_CONFIGURATION_FILE</code> <code>str</code> Filename of the ODS configuration file for campaigns. <code>'experiment_configurations.ods'</code> <code>DEFAULT_EXPERIMENTS_DIRECTORY</code> <code>str</code> Name of the directory in the campaign directory under which experiment directories are created. <code>'experiments'</code> <code>EXPERIMENT_DIRECTORY_TEMPLATE</code> <code>str</code> Name template of experiment directories. Has to contain a placeholder for the ID. <code>'experiment_{:06d}'</code> <code>REPETITION_DIRECTORY_TEMPLATE</code> <code>str</code> Name template of repetition directories. Has to contain a placeholder for the ID. <code>'repetition_{:06d}'</code> <code>DEFAULT_DATA_DIRECTORY</code> <code>str</code> Name of the directory that is used to store the logs under each repetition. <code>'data'</code> <code>REPETITION_DATA_KEY</code> <code>str</code> Keyname of the element in the <code>AttrDict</code> returned by the <code>load_experiment_data</code> function that holds all the repetition data. <code>'repetition_data'</code> <p>To customize them they can be changed after the exputils package as been imported: <pre><code>import exputils as eu\n# use a shorter form for experiment and repetition directories\neu.EXPERIMENT_DIRECTORY_TEMPLATE = 'exp_{:06d}' \neu.REPETITION_DIRECTORY_TEMPLATE = 'rep_{:06d}'\n</code></pre></p>"}]}